int minMalwareSpread(int** graph, int graphRowSize, int *graphColSizes, int* initial, int initialSize)
{
    char* bfs = calloc(sizeof(char), graphRowSize);

    for (int i = 0; i < initialSize; i ++)
        bfs[initial[i]] = 1;

    int p = INT_MAX;
    int max = INT_MIN;

    char* tfs = malloc(sizeof(char) * graphRowSize);
    int* stacks = malloc(sizeof(int) * graphRowSize);

    for (int i = 0; i < initialSize; i ++)
    {
        memset(tfs, 0, sizeof(char) * graphRowSize);

        int all = 0;

        int x = initial[i];
        tfs[x] = 1;

        for (int j = 0; j < graphRowSize; j ++)
        {
            if (!graph[x][j])
                continue;

            if (bfs[j] || tfs[j])
                continue;

            tfs[j] = 1;

            int si = 0;
            stacks[si ++] = j;
            int num = 1;

            bool has = false;

            while (si)
            {
                int z = stacks[-- si];

                for (int k = 0; k < graphRowSize; k ++)
                {
                    if (!graph[z][k])
                        continue;

                    if (bfs[k] && k != x)
                    {
                        has = true;
                        break;
                    }

                    if (!tfs[k])
                    {
                        tfs[k] = 1;
                        stacks[si ++] = k;
                        num ++;
                    }
                }

                if (has)
                    break;
            }

            if (!has)
                all += num;
        }

        if (all > max || (all == max && x < p))
        {
            max = all;
            p = x;
        }
    }

    return p;
}
