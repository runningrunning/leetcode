/* bool prime(int x) */
/* { */
/*     if (x == 1) */
/*         return false; */

/*     if (x == 2 || x == 3) */
/*         return true; */

/*     for (int i = 2; i <= 10 && i < x; i ++) */
/*          if (!(x % i)) */
/*              return false; */
/*     return true; */
/* } */

int numPrimeArrangements(int x)
{
    int a[] = {0, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 10, 10, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 17, 17, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25};

    /* int n = 0; */
    /* for (int i = 1; i <= 100; i ++) */
    /* { */
    /*     n += prime(i) ? 1 : 0; */
    /*     printf("%d, ", n); */
    /* } */

    long ps = a[x - 1];
    long np = x - ps;
    long m = 1e9 + 7;

    long r = 1;
    for (int n = 1; n <= ps; n ++)
    {
        r *= n;
        r %= m;
    }

    for (int n = 1; n <= np; n ++)
    {
        r *= n;
        r %= m;
    }

    return r;
}

